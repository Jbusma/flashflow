# ────────────────────────────────────────────────────────────────────────────────
#  Cursor - post-processing rules
# ────────────────────────────────────────────────────────────────────────────────
#  Cheat-sheet
#  1. Runnable commands → start block with **exactly**
#       ```bash          or   ```shell
#     Nothing else after the language tag; this enables the green "Run".
#  2. File patches      → use  language:path
#       ```cpp:src/foo.cpp      or    ```diff:tests/bar_test.cpp
#     Cursor shows **no** Run button (it's a patch).
#  3. Avoid  ```language=bash  |  ```bash:path=…  – those break detection.
#  4. Inside Markdown docs (README, etc.) prefer  ~~~bash  …  ~~~  to avoid
#     triple-back-tick clashes.
#  5. The filters below already
#       • join lines with " && "
#       • strip inline comments
#     so any multi-line shell snippet turns into a one-click command.
#  6. Do NOT put comment lines (# …) inside runnable ```bash blocks;
#     they stop Cursor from showing the "Run" button.
# ────────────────────────────────────────────────────────────────────────────────

shell:
  join_with: " && "
  strip_comments: true

bash:
  join_with: " && "
  strip_comments: true

###############################################################################
#  Templates – one-liners you can reference from answers
###############################################################################
templates:
  # ── Build everything and run ALL tests ──────────────────────────────────────
  build_and_test_all: >
    rm -rf build &&
    cmake -S . -B build -DBUILD_TESTING=ON > /dev/null &&
    cmake --build build --parallel 8 -- -s > /dev/null &&
    ctest --test-dir build

  # ── Build + Binance-specific subset ─────────────────────────────────────────
  build_and_test_binance: >
    rm -rf build &&
    cmake -S . -B build -DBUILD_TESTING=ON > /dev/null &&
    cmake --build build --parallel 8 -- -s > /dev/null &&
    ctest --test-dir build &&
    ctest --test-dir build -R binance

  # ── First-time repository bootstrap ─────────────────────────────────────────
  git_init_push: >
    git init &&
    git add -A &&
    git commit -m "feat: initial flashflow import (tests passing)" &&
    git branch -M main &&
    git remote add origin git@github.com:Jbusma/flashflow.git &&
    git push -u origin main

  # ── Create repo on GitHub via gh-cli and push ───────────────────────────────
  gh_repo_create_push: >
    gh repo create Jbusma/flashflow --public --source . --remote origin --push 